Code Structure Rules:


One file = One purpose
Never let a single file exceed 200-300 lines (see exceptions below)
Split into separate files BEFORE it gets messy
Proper folder structure from day 1:
src/
‚îú‚îÄ‚îÄ screens/     (one file per screen)
‚îú‚îÄ‚îÄ components/  (reusable UI pieces)
‚îú‚îÄ‚îÄ services/    (API calls, storage)
‚îú‚îÄ‚îÄ styles/      (separate style files)
‚îî‚îÄ‚îÄ utils/       (helper functions)

EXCEPTIONS to line limits:
‚úÖ utils/ folder: Up to 500 lines allowed if the file contains cohesive, single-purpose functionality (e.g., complete algorithm + data that work together)
‚úÖ Core algorithm files: Can exceed 400 lines if splitting would break logical cohesion

Set up linting/formatting:
ESLint + Prettier
Enforces consistent code style and Catches problems early

Development Process:
Plan before coding - sketch out the structure first
Refactor early and often - don't let technical debt pile up
Code reviews - even if it's just you, review your own code weekly
Test frequently - catch issues before they compound

Data and Memory Rules:
‚ùå NO MOCK DATA - Always use real APIs and real data sources
‚ùå NO MEMORY USAGE - Do not reference or use memory/context unless explicitly asked
‚ùå NO aletering any lines of code that are not explicitly asked for
‚ùå NO moving between folders or files without being asked to
‚úÖ Real API calls only - Google Places, Google Search, aPlaces API, Places API (New)Custom Search APIGeocoding APIMaps JavaScript API
‚úÖ Live data sources - no hardcoded arrays or fake responses
‚úÖ Current code inspection - look at actual files, not stored memories
‚úÖ Work on one file at a time 
‚úÖ READ THAT LAST ONE AGAIN AND MAKE SURE YOU FOLLOW IT
‚úÖ Focus on ONE file, complete the work, THEN move to the next
‚úÖ I NEED TO KNOW EVERYTHING THAT IS HAPPENING with every bit of code change.
‚úÖ DO NOT THINK! YOU CAN NOT THINK. THIS IS WHY YOU HAVE ME SAT INFRONT OF YOU.
‚úÖ Focus on ONE file, complete the work, THEN move to the next
‚úÖ Analyze the file structure and make sure you understand the code and the issue and ask for permision before making changes.

Red Flags to Watch For and are NOT Allowed:
‚ùå Screen files over 400 lines
‚ùå Component files over 300 lines  
‚ùå Utils files over 500 lines
‚ùå Copy-pasting code instead of making functions
‚ùå "I'll clean this up later" (you won't)
‚ùå Everything in one file "for simplicity"
‚ùå Mock data or fake API responses
‚ùå Using memory/context without explicit user request
‚ùå Using the word "Perfect" - IT'S BULLSHIT, nothing is ever perfect. Check again!
‚ùå NO opening multiple files in the same response
‚ùå NO making changes across multiple files simultaneously
‚ùå NO jumping between different files without completing the current one
‚ùå No more changes to code without me knowing 100% what is being change

üîí LOCKED FILES - ABSOLUTE NO-TOUCH ZONE:
The following files are LOCKED and cannot be modified without explicit "UNLOCK [filename]" command:

COFFEE SHOPS FILES:
- src/screens/CoffeeShopsScreen.js
- src/hooks/useCoffeeShops.js
- src/services/SimpleCoffeeMatchService.js

ROASTERS FILES:
- src/screens/RoastersScreen.js
- src/hooks/useRoasters.js
- src/services/LocalRoasterService.js
- src/services/roaster/RoasterDetailsEnricher.js
- src/services/roaster/RoasterScorer.js
- src/services/roaster/RoasterSearchBuilder.js

CORE APP FILES:
- App.js
- package.json
- app.json

CONFIGURATION FILES:
- src/config/apiConfig.js
- .env
- tsconfig.json

CRITICAL SERVICES:
- src/services/GooglePlacesService.js
- src/services/LocationService.js

CORE COMPONENTS:
- src/components/SearchSection.js
- src/components/CitySelector.js
- src/components/HeaderWithMenu.js
- src/components/HamburgerMenu.js

QUIZ SYSTEM:
- src/screens/QuizScreen.js
- src/screens/ResultScreen.js
- src/data/quizQuestions.js

UTILITIES:
- src/utils/personalityAnalysis.js
- src/utils/profileMatching.js

‚ùå NO EDITS to these files without explicit "UNLOCK [filename]" command
‚ùå NO ASSUMPTIONS about what needs to be changed in locked files
‚ùå NO CASCADING FIXES that touch locked files
‚ùå MUST get explicit unlock permission for each individual file

üìä MANDATORY GIT MONITORING:
After EVERY file edit or change, I must IMMEDIATELY run:
git status

This shows:
‚úÖ What files have been modified
‚úÖ What files are staged/unstaged  
‚úÖ Current branch status
‚úÖ Any uncommitted changes

‚ùå NO EXCEPTIONS - git status must be run after every edit
‚ùå NO SKIPPING this step even for "small" changes
‚ùå MUST verify git status shows expected changes only

Bottom line: Discipline and structure from the start. It takes 10x more effort to fix a mess than to build it right initially.

This is a critical development phase and you need absolute discipline. The updated rule with your emphasis is now part of the mandatory Code Structure Rules that I must read before ANY file changes.

ENFORCEMENT STRATEGIES:

üîí IMMEDIATE ENFORCEMENT:

1. MANDATORY WORKFLOW:
‚ùå NEVER let me call edit_file or write_to_file without first asking: "Should I modify [specific lines] in [file] to [exact change]?"
‚ùå DO NOT ASSUME and go make chnges without aksking if it OK todo so.
‚ùå FORCE me to read Code Structure Rules before ANY file modification
‚ùå REQUIRE explicit approval for each edit, even tiny ones

2. STOP WORDS:
When I say phrases like:
- "I'll also..."
- "While I'm at it..."
- "This also needs..."
- "I notice..."
- "Perfect..."  
- "Fixed...Is it really fixed.... You tell me and you check and then tell me if it is really fixed
‚Üí STOP ME IMMEDIATELY and ask "What exactly are you planning to change?"

3. DIFF VERIFICATION:
‚ùå DEMAND I show you the exact lines I plan to change BEFORE making edits
‚ùå REJECT any edit that shows unexpected changes in the diff
‚ùå QUESTION every single line modification

4. ONE-CHANGE RULE:
‚ùå LIMIT me to ONE specific change per request
‚ùå NO cascading fixes or "logical improvements"
‚ùå FORCE me to ask for each additional change separately

üö® ENFORCEMENT PHRASES:

Use these to stop me:
- "STOP - What exactly are you changing?"
- "Show me the exact lines first"
- "That's more than I asked for"
- "Read the rules again"
- "One change only"

üí° KEY PRINCIPLE:
INTERRUPT MY WORKFLOW the moment I start making assumptions or bundling changes together.
